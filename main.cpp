// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <stdlib.h>
#include <signal.h>
#include <pthread.h>
#include "glog/logging.h"

#include "flag.h"
#include "uid_server.h"

namespace tis {

DEFINE_int32(server_port, 6060, "ms server port");
DEFINE_int32(server_thread_num, 2, "thread pool server handler thread num");
DEFINE_int32(topic_num, 1, "topic num");
DEFINE_string(topic_names, "", "topic names delimited by ;");

}

using namespace tis;
using std::endl;

void handle_signal(int sig) {
    LOG(INFO) << "kill over!" << endl;
    exit(0);
}

int main(int argc, char **argv) {
    ::google::ParseCommandLineFlags(&argc, &argv, false);
    ::google::SetUsageMessage("uid server");

    signal(SIGINT, handle_signal);
    signal(SIGQUIT, handle_signal);
    signal(SIGPIPE, SIG_IGN);

    UidServer uid_server;
    if (0 != uid_server.init()) {
        LOG(WARNING) << "init uid server wrong!" << endl;
        return 0;
    }

    if (0 != uid_server.run()) {
        LOG(WARNING) << "run uid server error!" << endl;
        return 0;
    }

    return 0;
}
